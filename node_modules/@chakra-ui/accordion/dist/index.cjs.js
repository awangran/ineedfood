"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Accordion: () => Accordion,
  AccordionButton: () => AccordionButton,
  AccordionIcon: () => AccordionIcon,
  AccordionItem: () => AccordionItem,
  AccordionPanel: () => AccordionPanel,
  AccordionProvider: () => AccordionProvider,
  useAccordion: () => useAccordion,
  useAccordionContext: () => useAccordionContext,
  useAccordionItem: () => useAccordionItem,
  useAccordionItemState: () => useAccordionItemState,
  useAccordionStyles: () => useAccordionStyles
});
module.exports = __toCommonJS(src_exports);

// ../../react-shim.js
var import_react = __toESM(require("react"));

// src/accordion.tsx
var import_system = require("@chakra-ui/system");
var import_utils2 = require("@chakra-ui/utils");
var import_react3 = require("react");

// src/accordion-context.ts
var import_descendant = require("@chakra-ui/descendant");
var import_react_utils = require("@chakra-ui/react-utils");
var [AccordionStylesProvider, useAccordionStyles] = (0, import_react_utils.createContext)({
  name: `AccordionStylesContext`,
  errorMessage: `useAccordionStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Accordion />" `
});
var [AccordionItemProvider, useAccordionItemContext] = (0, import_react_utils.createContext)({
  name: "AccordionItemContext",
  errorMessage: "useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` "
});
var [
  AccordionDescendantsProvider,
  useAccordionDescendantsContext,
  useAccordionDescendants,
  useAccordionDescendant
] = (0, import_descendant.createDescendantContext)();

// src/use-accordion.ts
var import_hooks = require("@chakra-ui/hooks");
var import_react_utils2 = require("@chakra-ui/react-utils");
var import_utils = require("@chakra-ui/utils");
var import_react2 = require("react");
function useAccordion(props) {
  const {
    onChange,
    defaultIndex,
    index: indexProp,
    allowMultiple,
    allowToggle,
    ...htmlProps
  } = props;
  allowMultipleWarning(props);
  allowMultipleAndAllowToggleWarning(props);
  const descendants = useAccordionDescendants();
  const [focusedIndex, setFocusedIndex] = (0, import_react2.useState)(-1);
  (0, import_hooks.useUnmountEffect)(() => {
    setFocusedIndex(-1);
  });
  const [index, setIndex] = (0, import_hooks.useControllableState)({
    value: indexProp,
    defaultValue() {
      if (allowMultiple)
        return defaultIndex ?? [];
      return defaultIndex ?? -1;
    },
    onChange
  });
  const getAccordionItemProps = (idx) => {
    let isOpen = false;
    if (idx !== null) {
      isOpen = (0, import_utils.isArray)(index) ? index.includes(idx) : index === idx;
    }
    const onChange2 = (isOpen2) => {
      if (idx === null)
        return;
      if (allowMultiple && (0, import_utils.isArray)(index)) {
        const nextState = isOpen2 ? (0, import_utils.addItem)(index, idx) : (0, import_utils.removeItem)(index, idx);
        setIndex(nextState);
      } else if (isOpen2) {
        setIndex(idx);
      } else if (allowToggle) {
        setIndex(-1);
      }
    };
    return { isOpen, onChange: onChange2 };
  };
  return {
    index,
    setIndex,
    htmlProps,
    getAccordionItemProps,
    focusedIndex,
    setFocusedIndex,
    descendants
  };
}
var [AccordionProvider, useAccordionContext] = (0, import_react_utils2.createContext)({
  name: "AccordionContext",
  errorMessage: "useAccordionContext: `context` is undefined. Seems you forgot to wrap the accordion components in `<Accordion />`"
});
function useAccordionItem(props) {
  const { isDisabled, isFocusable, id, ...htmlProps } = props;
  const { getAccordionItemProps, setFocusedIndex } = useAccordionContext();
  const buttonRef = (0, import_react2.useRef)(null);
  const [buttonId, panelId] = (0, import_hooks.useIds)(id, `accordion-button`, `accordion-panel`);
  focusableNotDisabledWarning(props);
  const { register, index, descendants } = useAccordionDescendant({
    disabled: isDisabled && !isFocusable
  });
  const { isOpen, onChange } = getAccordionItemProps(index === -1 ? null : index);
  warnIfOpenAndDisabled({ isOpen, isDisabled });
  const onOpen = () => {
    onChange == null ? void 0 : onChange(true);
  };
  const onClose = () => {
    onChange == null ? void 0 : onChange(false);
  };
  const onClick = (0, import_react2.useCallback)(() => {
    onChange == null ? void 0 : onChange(!isOpen);
    setFocusedIndex(index);
  }, [index, setFocusedIndex, isOpen, onChange]);
  const onKeyDown = (0, import_react2.useCallback)((event) => {
    const eventKey = (0, import_utils.normalizeEventKey)(event);
    const keyMap = {
      ArrowDown: () => {
        const next = descendants.nextEnabled(index);
        if (next)
          (0, import_utils.focus)(next.node);
      },
      ArrowUp: () => {
        const prev = descendants.prevEnabled(index);
        if (prev)
          (0, import_utils.focus)(prev.node);
      },
      Home: () => {
        const first = descendants.firstEnabled();
        if (first)
          (0, import_utils.focus)(first.node);
      },
      End: () => {
        const last = descendants.lastEnabled();
        if (last)
          (0, import_utils.focus)(last.node);
      }
    };
    const action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      action(event);
    }
  }, [descendants, index]);
  const onFocus = (0, import_react2.useCallback)(() => {
    setFocusedIndex(index);
  }, [setFocusedIndex, index]);
  const getButtonProps = (0, import_react2.useCallback)((props2 = {}, ref = null) => ({
    ...props2,
    type: "button",
    ref: (0, import_react_utils2.mergeRefs)(register, buttonRef, ref),
    id: buttonId,
    disabled: !!isDisabled,
    "aria-expanded": !!isOpen,
    "aria-controls": panelId,
    onClick: (0, import_utils.callAllHandlers)(props2.onClick, onClick),
    onFocus: (0, import_utils.callAllHandlers)(props2.onFocus, onFocus),
    onKeyDown: (0, import_utils.callAllHandlers)(props2.onKeyDown, onKeyDown)
  }), [
    buttonId,
    isDisabled,
    isOpen,
    onClick,
    onFocus,
    onKeyDown,
    panelId,
    register
  ]);
  const getPanelProps = (0, import_react2.useCallback)((props2 = {}, ref = null) => ({
    ...props2,
    ref,
    role: "region",
    id: panelId,
    "aria-labelledby": buttonId,
    hidden: !isOpen
  }), [buttonId, isOpen, panelId]);
  return {
    isOpen,
    isDisabled,
    isFocusable,
    onOpen,
    onClose,
    getButtonProps,
    getPanelProps,
    htmlProps
  };
}
function allowMultipleWarning(props) {
  const index = props.index || props.defaultIndex;
  const condition = !(0, import_utils.isUndefined)(index) && !(0, import_utils.isArray)(index) && props.allowMultiple;
  (0, import_utils.warn)({
    condition: !!condition,
    message: `If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: ${typeof index},`
  });
}
function allowMultipleAndAllowToggleWarning(props) {
  (0, import_utils.warn)({
    condition: !!(props.allowMultiple && props.allowToggle),
    message: `If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not`
  });
}
function focusableNotDisabledWarning(props) {
  (0, import_utils.warn)({
    condition: !!(props.isFocusable && !props.isDisabled),
    message: `Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.
    `
  });
}
function warnIfOpenAndDisabled(props) {
  (0, import_utils.warn)({
    condition: props.isOpen && !!props.isDisabled,
    message: "Cannot open a disabled accordion item"
  });
}

// src/accordion.tsx
var Accordion = (0, import_system.forwardRef)(function Accordion2({ children, reduceMotion, ...props }, ref) {
  const styles = (0, import_system.useMultiStyleConfig)("Accordion", props);
  const ownProps = (0, import_system.omitThemingProps)(props);
  const { htmlProps, descendants, ...context } = useAccordion(ownProps);
  const ctx = (0, import_react3.useMemo)(() => ({ ...context, reduceMotion: !!reduceMotion }), [context, reduceMotion]);
  return /* @__PURE__ */ import_react.default.createElement(AccordionDescendantsProvider, {
    value: descendants
  }, /* @__PURE__ */ import_react.default.createElement(AccordionProvider, {
    value: ctx
  }, /* @__PURE__ */ import_react.default.createElement(AccordionStylesProvider, {
    value: styles
  }, /* @__PURE__ */ import_react.default.createElement(import_system.chakra.div, {
    ref,
    ...htmlProps,
    className: (0, import_utils2.cx)("chakra-accordion", props.className),
    __css: styles.root
  }, children))));
});
if (import_utils2.__DEV__) {
  Accordion.displayName = "Accordion";
}

// src/accordion-button.tsx
var import_system2 = require("@chakra-ui/system");
var import_utils3 = require("@chakra-ui/utils");
var AccordionButton = (0, import_system2.forwardRef)(function AccordionButton2(props, ref) {
  const { getButtonProps } = useAccordionItemContext();
  const buttonProps = getButtonProps(props, ref);
  const styles = useAccordionStyles();
  const buttonStyles = {
    display: "flex",
    alignItems: "center",
    width: "100%",
    outline: 0,
    ...styles.button
  };
  return /* @__PURE__ */ import_react.default.createElement(import_system2.chakra.button, {
    ...buttonProps,
    className: (0, import_utils3.cx)("chakra-accordion__button", props.className),
    __css: buttonStyles
  });
});
if (import_utils3.__DEV__) {
  AccordionButton.displayName = "AccordionButton";
}

// src/accordion-icon.tsx
var import_icon = require("@chakra-ui/icon");
var import_utils4 = require("@chakra-ui/utils");
function AccordionIcon(props) {
  const { isOpen, isDisabled } = useAccordionItemContext();
  const { reduceMotion } = useAccordionContext();
  const _className = (0, import_utils4.cx)("chakra-accordion__icon", props.className);
  const styles = useAccordionStyles();
  const iconStyles = {
    opacity: isDisabled ? 0.4 : 1,
    transform: isOpen ? "rotate(-180deg)" : void 0,
    transition: reduceMotion ? void 0 : "transform 0.2s",
    transformOrigin: "center",
    ...styles.icon
  };
  return /* @__PURE__ */ import_react.default.createElement(import_icon.Icon, {
    viewBox: "0 0 24 24",
    "aria-hidden": true,
    className: _className,
    __css: iconStyles,
    ...props
  }, /* @__PURE__ */ import_react.default.createElement("path", {
    fill: "currentColor",
    d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
  }));
}
if (import_utils4.__DEV__) {
  AccordionIcon.displayName = "AccordionIcon";
}

// src/accordion-item.tsx
var import_system3 = require("@chakra-ui/system");
var import_utils5 = require("@chakra-ui/utils");
var import_react4 = require("react");
var AccordionItem = (0, import_system3.forwardRef)(function AccordionItem2(props, ref) {
  const { children, className } = props;
  const { htmlProps, ...context } = useAccordionItem(props);
  const styles = useAccordionStyles();
  const containerStyles = {
    ...styles.container,
    overflowAnchor: "none"
  };
  const ctx = (0, import_react4.useMemo)(() => context, [context]);
  return /* @__PURE__ */ import_react.default.createElement(AccordionItemProvider, {
    value: ctx
  }, /* @__PURE__ */ import_react.default.createElement(import_system3.chakra.div, {
    ref,
    ...htmlProps,
    className: (0, import_utils5.cx)("chakra-accordion__item", className),
    __css: containerStyles
  }, (0, import_utils5.runIfFn)(children, {
    isExpanded: !!context.isOpen,
    isDisabled: !!context.isDisabled
  })));
});
if (import_utils5.__DEV__) {
  AccordionItem.displayName = "AccordionItem";
}
function useAccordionItemState() {
  const { isOpen, isDisabled, onClose, onOpen } = useAccordionItemContext();
  return { isOpen, onClose, isDisabled, onOpen };
}

// src/accordion-panel.tsx
var import_system4 = require("@chakra-ui/system");
var import_transition = require("@chakra-ui/transition");
var import_utils6 = require("@chakra-ui/utils");
var AccordionPanel = (0, import_system4.forwardRef)(function AccordionPanel2(props, ref) {
  const { reduceMotion } = useAccordionContext();
  const { getPanelProps, isOpen } = useAccordionItemContext();
  const panelProps = getPanelProps(props, ref);
  const _className = (0, import_utils6.cx)("chakra-accordion__panel", props.className);
  const styles = useAccordionStyles();
  if (!reduceMotion) {
    delete panelProps.hidden;
  }
  const child = /* @__PURE__ */ import_react.default.createElement(import_system4.chakra.div, {
    ...panelProps,
    __css: styles.panel,
    className: _className
  });
  if (!reduceMotion) {
    return /* @__PURE__ */ import_react.default.createElement(import_transition.Collapse, {
      in: isOpen
    }, child);
  }
  return child;
});
if (import_utils6.__DEV__) {
  AccordionPanel.displayName = "AccordionPanel";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Accordion,
  AccordionButton,
  AccordionIcon,
  AccordionItem,
  AccordionPanel,
  AccordionProvider,
  useAccordion,
  useAccordionContext,
  useAccordionItem,
  useAccordionItemState,
  useAccordionStyles
});
