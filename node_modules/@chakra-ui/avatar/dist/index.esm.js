// ../../react-shim.js
import React from "react";

// src/avatar.tsx
import {
  chakra as chakra3,
  forwardRef,
  omitThemingProps,
  useMultiStyleConfig
} from "@chakra-ui/system";
import { cx, __DEV__ as __DEV__2 } from "@chakra-ui/utils";

// src/avatar-context.tsx
import { createContext } from "@chakra-ui/react-utils";
var [AvatarStylesProvider, useAvatarStyles] = createContext({
  name: `AvatarStylesContext`,
  errorMessage: `useAvatarStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Avatar />" `
});

// src/avatar-image.tsx
import { useImage } from "@chakra-ui/image";
import { chakra as chakra2 } from "@chakra-ui/system";
import { __DEV__ } from "@chakra-ui/utils";
import { cloneElement } from "react";

// src/avatar-name.tsx
import { chakra } from "@chakra-ui/system";
function initials(name) {
  const [firstName, lastName] = name.split(" ");
  return firstName && lastName ? `${firstName.charAt(0)}${lastName.charAt(0)}` : firstName.charAt(0);
}
function AvatarName(props) {
  const { name, getInitials, ...rest } = props;
  const styles = useAvatarStyles();
  return /* @__PURE__ */ React.createElement(chakra.div, {
    role: "img",
    "aria-label": name,
    ...rest,
    __css: styles.label
  }, name ? getInitials == null ? void 0 : getInitials(name) : null);
}

// src/avatar-image.tsx
function AvatarImage(props) {
  const {
    src,
    srcSet,
    onError,
    getInitials,
    name,
    borderRadius,
    loading,
    iconLabel,
    icon = /* @__PURE__ */ React.createElement(GenericAvatarIcon, null),
    ignoreFallback,
    referrerPolicy
  } = props;
  const status = useImage({ src, onError, ignoreFallback });
  const hasLoaded = status === "loaded";
  const showFallback = !src || !hasLoaded;
  if (showFallback) {
    return name ? /* @__PURE__ */ React.createElement(AvatarName, {
      className: "chakra-avatar__initials",
      getInitials,
      name
    }) : cloneElement(icon, {
      role: "img",
      "aria-label": iconLabel
    });
  }
  return /* @__PURE__ */ React.createElement(chakra2.img, {
    src,
    srcSet,
    alt: name,
    referrerPolicy,
    className: "chakra-avatar__img",
    loading,
    __css: {
      width: "100%",
      height: "100%",
      objectFit: "cover",
      borderRadius
    }
  });
}
if (__DEV__) {
  AvatarImage.displayName = "AvatarImage";
}
var GenericAvatarIcon = (props) => /* @__PURE__ */ React.createElement(chakra2.svg, {
  viewBox: "0 0 128 128",
  color: "#fff",
  width: "100%",
  height: "100%",
  className: "chakra-avatar__svg",
  ...props
}, /* @__PURE__ */ React.createElement("path", {
  fill: "currentColor",
  d: "M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z"
}), /* @__PURE__ */ React.createElement("path", {
  fill: "currentColor",
  d: "M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24"
}));

// src/avatar.tsx
var baseStyle = {
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  textAlign: "center",
  textTransform: "uppercase",
  fontWeight: "medium",
  position: "relative",
  flexShrink: 0
};
var Avatar = forwardRef((props, ref) => {
  const styles = useMultiStyleConfig("Avatar", props);
  const {
    src,
    srcSet,
    name,
    showBorder,
    borderRadius = "full",
    onError,
    getInitials = initials,
    icon = /* @__PURE__ */ React.createElement(GenericAvatarIcon, null),
    iconLabel = " avatar",
    loading,
    children,
    borderColor,
    ignoreFallback,
    ...rest
  } = omitThemingProps(props);
  const avatarStyles = {
    borderRadius,
    borderWidth: showBorder ? "2px" : void 0,
    ...baseStyle,
    ...styles.container
  };
  if (borderColor) {
    avatarStyles.borderColor = borderColor;
  }
  return /* @__PURE__ */ React.createElement(chakra3.span, {
    ref,
    ...rest,
    className: cx("chakra-avatar", props.className),
    __css: avatarStyles
  }, /* @__PURE__ */ React.createElement(AvatarStylesProvider, {
    value: styles
  }, /* @__PURE__ */ React.createElement(AvatarImage, {
    src,
    srcSet,
    loading,
    onError,
    getInitials,
    name,
    borderRadius,
    icon,
    iconLabel,
    ignoreFallback
  }), children));
});
if (__DEV__2) {
  Avatar.displayName = "Avatar";
}

// src/avatar-group.tsx
import {
  chakra as chakra4,
  forwardRef as forwardRef2,
  omitThemingProps as omitThemingProps2,
  useMultiStyleConfig as useMultiStyleConfig2
} from "@chakra-ui/system";
import { cx as cx2, filterUndefined, __DEV__ as __DEV__3 } from "@chakra-ui/utils";
import { getValidChildren } from "@chakra-ui/react-utils";
import { cloneElement as cloneElement2 } from "react";
var AvatarGroup = forwardRef2(function AvatarGroup2(props, ref) {
  const styles = useMultiStyleConfig2("Avatar", props);
  const {
    children,
    borderColor,
    max,
    spacing = "-0.75rem",
    borderRadius = "full",
    ...rest
  } = omitThemingProps2(props);
  const validChildren = getValidChildren(children);
  const childrenWithinMax = max ? validChildren.slice(0, max) : validChildren;
  const excess = max != null && validChildren.length - max;
  const reversedChildren = childrenWithinMax.reverse();
  const clones = reversedChildren.map((child, index) => {
    const isFirstAvatar = index === 0;
    const childProps = {
      marginEnd: isFirstAvatar ? 0 : spacing,
      size: props.size,
      borderColor: child.props.borderColor ?? borderColor,
      showBorder: true
    };
    return cloneElement2(child, filterUndefined(childProps));
  });
  const groupStyles = {
    display: "flex",
    alignItems: "center",
    justifyContent: "flex-end",
    flexDirection: "row-reverse"
  };
  const excessStyles = {
    borderRadius,
    marginStart: spacing,
    ...baseStyle,
    ...styles.excessLabel
  };
  return /* @__PURE__ */ React.createElement(chakra4.div, {
    ref,
    role: "group",
    __css: groupStyles,
    ...rest,
    className: cx2("chakra-avatar__group", props.className)
  }, excess > 0 && /* @__PURE__ */ React.createElement(chakra4.span, {
    className: "chakra-avatar__excess",
    __css: excessStyles
  }, `+${excess}`), clones);
});
if (__DEV__3) {
  AvatarGroup.displayName = "AvatarGroup";
}

// src/avatar-badge.tsx
import {
  chakra as chakra5,
  forwardRef as forwardRef3
} from "@chakra-ui/system";
import { cx as cx3, __DEV__ as __DEV__4 } from "@chakra-ui/utils";
var AvatarBadge = forwardRef3(function AvatarBadge2(props, ref) {
  const styles = useAvatarStyles();
  const badgeStyles = {
    position: "absolute",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    insetEnd: "0",
    bottom: "0",
    ...styles.badge
  };
  return /* @__PURE__ */ React.createElement(chakra5.div, {
    ref,
    ...props,
    className: cx3("chakra-avatar__badge", props.className),
    __css: badgeStyles
  });
});
if (__DEV__4) {
  AvatarBadge.displayName = "AvatarBadge";
}
export {
  Avatar,
  AvatarBadge,
  AvatarGroup,
  useAvatarStyles
};
